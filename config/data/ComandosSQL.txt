CREATE TABLE cor (
	id_cor SERIAL PRIMARY KEY NOT NULL,
	desc_cor VARCHAR(50) NOT NULL,
	faixa_ebc VARCHAR(20) NOT NULL
)

CREATE TABLE amargor (
	id_amargor SERIAL PRIMARY KEY NOT NULL,
	desc_amargor VARCHAR(50) NOT NULL,
	faixa_ibu VARCHAR(20) NOT NULL
)

CREATE TABLE teor_alcoolico (
	id_teor SERIAL PRIMARY KEY NOT NULL,
	desc_teor VARCHAR(50) NOT NULL,
	faixa_abv VARCHAR(20) NOT NULL
)

CREATE TABLE corpo_cerveja (
	id_corpo SERIAL PRIMARY KEY NOT NULL,
	desc_corpo VARCHAR(50) NOT NULL
)

CREATE TABLE aroma (
	id_aroma SERIAL PRIMARY KEY NOT NULL,
	desc_aroma VARCHAR(50) NOT NULL
)

CREATE TABLE sabor_principal (
	id_sabor SERIAL PRIMARY KEY NOT NULL,
	desc_sabor VARCHAR(50) NOT NULL
)

CREATE TABLE carbonatacao (
	id_carbonatacao SERIAL PRIMARY KEY NOT NULL,
	desc_carbona VARCHAR(50) NOT NULL
)

CREATE TABLE mouthfeel (
	id_mouthfeel SERIAL PRIMARY KEY NOT NULL,
	desc_mouthfeel VARCHAR(50) NOT NULL
)

CREATE TABLE img_cerveja (
	id_img_cerveja SERIAL PRIMARY KEY NOT NULL,
	img_cerveja VARCHAR(255) NOT NULL
)

CREATE TABLE cerveja (
	id_cerveja SERIAL PRIMARY KEY NOT NULL,
	nome VARCHAR (50) NOT NULL,
	descricao VARCHAR(150) NOT NULL,
	id_cor INT,
	id_amargor INT,
	id_teor INT,
	id_corpo INT,
	id_aroma INT,
	id_sabor INT,
	id_carbonatacao INT,
	id_mouthfeel INT,
	id_img_cerveja INT,
	FOREIGN KEY (id_cor) REFERENCES cor (id_cor),
	FOREIGN KEY (id_amargor) REFERENCES amargor (id_amargor),
	FOREIGN KEY (id_teor) REFERENCES teor_alcoolico (id_teor),
	FOREIGN KEY (id_corpo) REFERENCES corpo_cerveja (id_corpo),
	FOREIGN KEY (id_aroma) REFERENCES aroma (id_aroma),
	FOREIGN KEY (id_sabor) REFERENCES sabor_principal (id_sabor),
	FOREIGN KEY (id_carbonatacao) REFERENCES carbonatacao (id_carbonatacao),
	FOREIGN KEY (id_mouthfeel) REFERENCES mouthfeel (id_mouthfeel),
	FOREIGN KEY (id_img_cerveja) REFERENCES img_cerveja (id_img_cerveja)
)

PARTE 2

CREATE TABLE foto_usuario (
	id_foto_usuario SERIAL PRIMARY KEY NOT NULL,
	img_foto_usuario BYTEA NOT NULL
)

CREATE TABLE usuario (
	cpf VARCHAR(11) PRIMARY KEY NOT NULL,
	nome VARCHAR(50) NOT NULL,
	sobrenome VARCHAR(50) NOT NULL,
	email VARCHAR(100) NOT NULL,
	senha VARCHAR(255) NOT NULL,
	telefone VARCHAR(15),
	data_cadastro TIMESTAMP NOT NULL,
	tipo_usuario INTEGER NOT NULL,
	id_foto_usuario INT,
	FOREIGN KEY (id_foto_usuario) REFERENCES foto_usuario (id_foto_usuario)
)

CREATE TABLE login (
	id_login SERIAL PRIMARY KEY NOT NULL,
	senha VARCHAR(355) NOT NULL,
	cpf VARCHAR,
	FOREIGN KEY (cpf) REFERENCES usuario (cpf)
)

CREATE TABLE auditoria (
	id_auditoria SERIAL PRIMARY KEY NOT NULL,
	id_login INT,
	campo_alterado VARCHAR(50) NOT NULL,
	valor_antigo VARCHAR(50) NOT NULL,
	valor_novo VARCHAR(50) NOT NULL,
	data_alteracao TIMESTAMP NOT NULL,
	FOREIGN KEY (id_login) REFERENCES login (id_login)
)

CREATE TABLE pergunta (
	id_pergunta SERIAL PRIMARY KEY NOT NULL,
	desc_pergunta VARCHAR(50) NOT NULL
)

CREATE TABLE alternativa (
	id_alternativa SERIAL PRIMARY KEY NOT NULL,
	desc_alternativa VARCHAR(50) NOT NULL,
	id_pergunta INT,
	FOREIGN KEY (id_pergunta) REFERENCES pergunta (id_pergunta)
)

CREATE TABLE resposta_usuario (
	id_resposta SERIAL PRIMARY KEY NOT NULL,
	cpf VARCHAR,
	id_alternativa INT,
	data_preenchimento TIMESTAMP NOT NULL,
	FOREIGN KEY (cpf) REFERENCES usuario (cpf),
	FOREIGN KEY (id_alternativa) REFERENCES alternativa (id_alternativa)
)

CREATE TABLE recomendacao (
	id_recomendacao SERIAL PRIMARY KEY NOT NULL,
	id_resposta INT,
	id_cerveja INT,
	FOREIGN KEY (id_resposta) REFERENCES resposta_usuario (id_resposta),
	FOREIGN KEY (id_cerveja) REFERENCES cerveja (id_cerveja)
)

CREATE TABLE questionario (
	id_questionario SERIAL PRIMARY KEY NOT NULL,
	cpf VARCHAR,
	id_resposta INT,
	FOREIGN KEY (cpf) REFERENCES usuario(cpf),
	FOREIGN KEY (id_resposta) REFERENCES resposta_usuario(id_resposta)
);

POPULAÇÃO
INSERT INTO cor (desc_cor, faixa_ebc) VALUES
('clara', '1-6 EBC'),
('dourada', '7-12 EBC'),
('âmbar', '13-25 EBC'),
('cobre', '26-39 EBC'),
('marrom', '40-59 EBC'),
('preta', '60+ EBC');

INSERT INTO amargor (desc_amargor, faixa_ibu) VALUES
('leve', '0 - 20 IBU'),
('moderado', '21 - 40 IBU'),
('amargo', '41 - 60 IBU'),
('muito amargo', '61 - 100+ IBU');

INSERT INTO teor_alcoolico (desc_teor, faixa_abv) VALUES
('baixo', 'até 3,5%'),
('moderado', '3,6% a 5,5%'),
('alto', '5,6% a 7,5%'),
('muito alto', 'acima de 7,5%');

INSERT INTO corpo_cerveja (desc_corpo) VALUES
('leve'),
('médio'),
('encorpado');

INSERT INTO aroma (desc_aroma) VALUES
('frutado'),
('floral'),
('especiarias'),
('torrado'),
('caramelo');

INSERT INTO sabor_principal (desc_sabor) VALUES
('doce'),
('amargo'),
('ácido'),
('salgado');


INSERT INTO carbonatacao (desc_carbona) VALUES
('baixa'),
('moderada'),
('alta');

INSERT INTO mouthfeel (desc_mouthfeel) VALUES
('suave'),
('cremosidade'),
('seco'),
('efervescente'),
('aveludado');

POPULAR PERGUNTA
INSERT INTO 
	pergunta (id_pergunta, desc_pergunta)
VALUES
	(1, 'Qual a cor da cerveja?'),
	(2, 'Qual é o teor alcoólico da cerveja?'),
	(3, 'Qual o nível de amargor da cerveja?'),
	(4, 'Como você descreveria o corpo da cerveja?'),
	(5, 'Quais notas de aroma predominam na cerveja?'),
	(6, 'Como você descreveria o sabor principal da cerveja?'),
	(7, 'Qual é a carbonatação da cerveja?'),
	(8, 'Como você descreveria a sensação na boca (mouthfeel)?')


POPULAR ALTERNATIVA
INSERT INTO 
	alternativa (id_alternativa, desc_alternativa, id_pergunta)
VALUES
	(1, 'clara', 1),
	(2, 'dourada', 1),
	(3, 'âmbar', 1),
	(4, 'cobre', 1),
	(5, 'marrom', 1),
	(6, 'preta', 1),
	(7, 'baixo', 2),
	(8, 'moderado', 2),
	(9, 'alto', 2),
	(10, 'muito alto', 2),
	(11, 'leve', 3),
	(12, 'moderado', 3),
	(13, 'amargo', 3),
	(14, 'muito amargo', 3),
	(15, 'leve', 4),
	(16, 'médio', 4),
	(17, 'encorpado', 4),
	(18, 'frutado', 5),
	(19, 'floral', 5),
	(20, 'especiarias', 5),
	(21, 'torrado', 5),
	(22, 'caramelo', 5),
	(23, 'doce', 6),
	(24, 'amargo', 6),
	(25, 'ácido', 6),
	(26, 'salgado', 6),
	(27, 'baixa', 7),
	(28, 'moderada', 7),
	(29, 'alta', 7),
	(30, 'suave', 8),
	(31, 'cremosidade', 8),
	(32, 'seco', 8),
	(33, 'efervescente', 8),
	(34, 'aveludado', 8)
	

CREATE FUNCTION recomendar_cerveja(cpf_usuario VARCHAR) 
RETURNS TABLE(cpf_usuario_out VARCHAR) , nome_usuario VARCHAR) , id_cerveja_recomendada INT, id_questionario integer)
LANGUAGE plpgsql
AS $$
DECLARE
    cerveja RECORD;
    resposta RECORD;
    cerveja_mais_alinhada INT := 0;
    cerveja_resultado INT := 0;
    questionario_resultado INT;
    usuario_nome VARCHAR;
BEGIN
    -- ValidaÃ§Ã£o de CPF existente
    SELECT nome INTO usuario_nome FROM usuario WHERE cpf = cpf_usuario;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'CPF % nÃ£o encontrado no banco de dados', cpf_usuario;
    END IF;

    -- Loop pelos questionÃ¡rios respondidos pelo usuÃ¡rio
    FOR questionario_resultado IN 
        SELECT DISTINCT r.id_questionario
        FROM resposta_usuario r
        WHERE r.cpf = cpf_usuario
    LOOP
        -- Reinicializa variÃ¡veis para o questionÃ¡rio atual
        cerveja_mais_alinhada := 0;
        cerveja_resultado := 0;

        -- Loop por cada cerveja
        FOR cerveja IN 
            SELECT * FROM cerveja
        LOOP
            DECLARE
                coincidencias INT := 0;
            BEGIN
                -- Loop nas respostas para comparar
                FOR resposta IN 
                    SELECT r2.id_questionario, a.desc_alternativa, a.id_pergunta
                    FROM resposta_usuario r2
                    JOIN alternativa a ON a.id_alternativa = r2.id_alternativa
                    WHERE r2.cpf = cpf_usuario AND r2.id_questionario = questionario_resultado
                LOOP
                    -- ComparaÃ§Ãµes das caracterÃ­sticas
                    IF resposta.id_pergunta = 1 AND cerveja.id_cor = (SELECT id_cor FROM cor WHERE desc_cor = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 2 AND cerveja.id_teor = (SELECT id_teor FROM teor_alcoolico WHERE desc_teor = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 3 AND cerveja.id_amargor = (SELECT id_amargor FROM amargor WHERE desc_amargor = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 4 AND cerveja.id_corpo = (SELECT id_corpo FROM corpo_cerveja WHERE desc_corpo = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 5 AND cerveja.id_aroma = (SELECT id_aroma FROM aroma WHERE desc_aroma = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 6 AND cerveja.id_sabor = (SELECT id_sabor FROM sabor_principal WHERE desc_sabor = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 7 AND cerveja.id_carbonatacao = (SELECT id_carbonatacao FROM carbonatacao WHERE desc_carbona = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    ELSIF resposta.id_pergunta = 8 AND cerveja.id_mouthfeel = (SELECT id_mouthfeel FROM mouthfeel WHERE desc_mouthfeel = resposta.desc_alternativa) THEN
                        coincidencias := coincidencias + 1;
                    END IF;
                END LOOP;

                -- Atualiza a cerveja mais alinhada
                IF coincidencias > cerveja_mais_alinhada THEN
                    cerveja_mais_alinhada := coincidencias;
                    cerveja_resultado := cerveja.id_cerveja;
                END IF;
            END;
        END LOOP;

        -- Retorna a linha com a recomendaÃ§Ã£o
        cpf_usuario_out := cpf_usuario;
        nome_usuario := usuario_nome;
        id_questionario := questionario_resultado;
        id_cerveja_recomendada := cerveja_resultado;

        RETURN NEXT;
    END LOOP;
END;
$$;
	
